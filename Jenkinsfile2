node {


    
    def app
    def dockerRegistry
    def dockerCreds
    
    parameters {
        gitParameter(name: 'REVISION', defaultValue: 'master', type: 'PT_REVISION')
    }


    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        /*checkout scm*/
        checkout ([
            $class: 'GitSCM',
            branches: [[name: "${params.REVISION}"]],
            userRemoteConfigs: [[
            url: 'https://github.com/funktrust/mainstay.git']]
                   ])
    }

    stage('Build image') {
        /* This builds the actual image; synonymous to
         * docker build on the command line */

        app = docker.build("funktrust/mainstay")
    }

    stage('Test image') {
        /* Ideally, we would run a test framework against our image.
         * For this example, we're using a Volkswagen-type approach ;-) */

        
            echo "Tests passed, nothing to see here."
        
    }

    stage('Push image') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        /* If we are pushing to docker hub, use this: */
           dockerRegistry =  'https://registry.hub.docker.com'
           dockerCreds = 'funktrust'
        /* If we are pushing to Artifactory, use this: 
        dockerRegistry = 'https://armory-docker-local.jfrog.io'
        dockerCreds = 'fernando-armory-artifactory'*/
        
        docker.withRegistry(dockerRegistry, dockerCreds ) {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
            
        }
    }
    stage('Create Properties file') {
        sh "docker inspect --format=\'{{index .RepoDigests 0}}\' registry.hub.docker.com/funktrust/mainstay:${env.BUILD_NUMBER}>image.properties"
        
        
      
        archiveArtifacts artifacts: 'image.properties'
    }
        
}





pipeline { 
    environment {
    registryCredential = 'funktrust-dockerhub'
  }
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:19.03
    command:
    - cat
    tty: true
    privileged: true
"""
    }
  }
  stages {
    stage('Clone repository') {
      steps {
        container('docker') {
        /* Let's make sure we have the repository cloned to our workspace */

        /*checkout scm*/
        checkout ([
            $class: 'GitSCM',
            branches: [[name: "${params.REVISION}"]],
            userRemoteConfigs: [[
            url: 'https://github.com/funktrust/mainstay.git']]
                   ])
        }
      }
    }

    stage('Build image') {
        steps {
            container('docker') {
              sh "docker build -t mainstay:latest ."
            }
            
        }
    }
    
    stage('Test image') {
        steps {
            container('docker') {
              echo "Tests passed, nothing to see here."
            }
            
        }
    }
    
  }
}



pipeline {

  agent any

  stages {

    stage('Checkout Source') {
      steps {
        git url:'https://github.com/funktrust/mainstay.git', branch:'master'
      }
    }
    
      stage("Build image") {
            steps {
                script {
                    myapp = docker.build("funktrust/mainstay:${env.BUILD_ID}")
                }
            }
        }
    
      stage("Push image") {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                            myapp.push("latest")
                            myapp.push("${env.BUILD_ID}")
                    }
                }
            }
        }

  }

}



pipeline {
    environment {
    registryCredential = 'funktrust-dockerhub'
  }
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            some-label: some-label-value
        spec:
          containers:
          - name: docker
            image: docker:latest
            command:
            - cat
            tty: true
          volumes:
          - hostPathVolume:
            mountPath: '/var/run/docker.sock'
            hostPath: '/var/run/docker.sock'
        '''
    }
  }
  stages {
    stage('Clone repository') {
      steps {
        git url:'https://github.com/funktrust/mainstay.git', branch:'master'
      }
    }

    stage('Run docker') {
      steps {
        container('docker') {
          sh 'docker build -t mainstay:latest .'
        }
      }
    }
  }
}





podTemplate(
    cloud: 'kubernetes', 
    label: 'jenkins/cicd-jenkins-agent',
    containers: [
        containerTemplate(
            name: 'docker',
            image: 'docker:latest',
            ttyEnabled: true,
            alwaysPullImage: false,
        ),
    ],
    volumes: [
        hostPathVolume(
            mountPath: '/var/run/docker.sock', 
            hostPath: '/var/run/docker.sock'
        )
    ]
)
{
    node('jenkins/cicd-jenkins-agent') {
        stage('Test') {
            git url: 'https://github.com/funktrust/mainstay.git'
            container('docker') {
                sh 'docker build -t mainstay:latest . --network=host'
            }
        }
    }
}





podTemplate(
    cloud: 'kubernetes', 
    label: 'workshop',
    containers: [
        containerTemplate(
            name: 'nodejs', 
            image:'node:alpine', 
            ttyEnabled: true, 
            alwaysPullImage: false
        ),
        containerTemplate(
            name: 'build',
            image: 'volaka/ibm-cloud-cli:1.2.1',
            ttyEnabled: true,
            alwaysPullImage: false,
            envVars: [
                secretEnvVar(
                    key: 'REGISTRY_TOKEN', 
                    secretName: 'icr-volaka', 
                    secretKey: 'apikey'
                )
            ]
        ),
        containerTemplate(
            name: 'deploy',
            image: 'volaka/ibm-cloud-cli:1.2.1',
            ttyEnabled: true,
            alwaysPullImage: false,
            envVars: [
                secretEnvVar(
                    key: 'IBMCLOUD_TOKEN', 
                    secretName: 'ic20', 
                    secretKey: 'apikey'
                )
            ]
        ),
    ],
    volumes: [
        hostPathVolume(
            mountPath: '/var/run/docker.sock', 
            hostPath: '/var/run/docker.sock'
        )
    ]
)
{
    node('workshop') {
        stage('Test') {
            git url: 'https://github.com/volaka/jenkins-nodejs-app.git'
            container('nodejs') {
                sh 'npm install'
                sh 'npm run test'
            }
        }
        stage('Build') {
            git url: 'https://github.com/volaka/jenkins-nodejs-app.git'
            container('build') {
                sh 'ibmcloud login -a cloud.ibm.com -r eu-de --apikey ${REGISTRY_TOKEN}'
                sh 'ibmcloud cr login'
                sh 'ibmcloud cr build -t de.icr.io/volaka/jenkins-app:${BUILD_ID} .'
            }
        }
        stage('Deploy') {
            git url: 'https://github.com/volaka/jenkins-nodejs-app.git'
            container('deploy') {
                sh 'ibmcloud login -a cloud.ibm.com -r eu-de --apikey ${IBMCLOUD_TOKEN}'
                sh 'ibmcloud ks cluster config --cluster volaka-k8s'
                sh 'sed -i "s~^\\([[:blank:]]*\\)image:.*$~\\1image: de.icr.io/volaka/jenkins-app:${BUILD_ID}~" deployment.yml'
                sh 'kubectl apply -f deployment.yml -n default'
                sh 'kubectl get svc -n jenkins'
            }
        }
    }
}


    stage('Create Docker images') {
      container('docker') {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
          credentialsId: 'dockerhub',
          usernameVariable: 'DOCKER_HUB_USER',
          passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
          sh """
            docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
            docker build -t namespace/my-image:${gitCommit} .
            docker push namespace/my-image:${gitCommit}
            """
        }
      }
    }


pipeline {
    agent {
        kubernetes {
            yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
            name: 'jenkins-slave'
            namespace: 'your-namespace'
        spec:
            containers:
            - name: jnlp
              image: jenkins/inbound-agent:4.3-9-alpine
              tty: true
            - name: demo-application
              image: some-image
              imagePullSecrets:
                  - name: your-secret
              tty: true

        """.stripIndent()
        }
    }
    stages {
        stage('run app') {
            steps {
                container('demo-application') {
                    echo POD_CONTAINER
                }
            }
        }
    }
}



Clone repository
Build image
Test image
Push image
Create Properties file







podTemplate(
    cloud: 'kubernetes', 
    label: 'jenkins/cicd-jenkins-agent',
    containers: [
        containerTemplate(
            name: 'docker',
            image: 'docker:latest',
            ttyEnabled: true,
            alwaysPullImage: false,
        ),
    ],
    volumes: [
        hostPathVolume(
            mountPath: '/var/run/docker.sock', 
            hostPath: '/var/run/docker.sock'
        )
    ]
)
{
    node('jenkins/cicd-jenkins-agent') {
        stage('Clone repository') {
            git url: 'https://github.com/funktrust/mainstay.git'
            container('docker') {
                echo 'Cloned repository successfully.'
            }
        }

        stage('Build image') {
            git url: 'https://github.com/funktrust/mainstay.git'
            container('docker') {
                sh 'docker build -t mainstay:${BUILD_ID} . --network=host'
                sh 'docker tag mainstay:${BUILD_ID} funktrust/mainstay:${BUILD_ID}'
            }
        }

        stage('Test image') {
            git url: 'https://github.com/funktrust/mainstay.git'
            container('docker') {
                echo 'Tests passed, nothing to see here.'
            }
        }

        stage('Push image') {
            git url: 'https://github.com/funktrust/mainstay.git'
            container('docker') {
                sh 'docker push funktrust/mainstay:${BUILD_ID}'
            }
        }
    }

}



pipeline {
    agent {
        kubernetes {
            // cloud 'kubernetes'
            inheritFrom 'jenkins/cicd-jenkins-agent'
            yaml """\
        apiVersion: v1
        kind: Pod
        metadata:
            name: 'jenkins/cicd-jenkins-agent'
            namespace: 'jenkins'
        spec:
            containers:
            - name: docker
              image: docker:latest
              imagePullSecrets:
                  - name: dockerhub
              tty: true
              volumeMounts:
              - name: dockersock
              mountPath: /var/run/docker.sock
            volumes:
            - name: dockersock
            hostPath:
                path: /var/run/docker.sock

        """.stripIndent()
        }
    }

    stages {
        stage('Clone repository') {
                steps {
                    git url: 'https://github.com/funktrust/mainstay.git'
                    container('docker') {
                        echo 'Cloned repository successfully.'
                    }
                }
            }
        stage('Build image') {
                steps {
                    git url: 'https://github.com/funktrust/mainstay.git'
                    container('docker') {
                        sh 'docker build -t mainstay:${BUILD_ID} . --network=host'
                        sh 'docker tag mainstay:${BUILD_ID} funktrust/mainstay:${BUILD_ID}'
                    }
                }
            }

        stage('Test image') {
                steps {
                    git url: 'https://github.com/funktrust/mainstay.git'
                    container('docker') {
                        echo 'Tests passed, nothing to see here.'
                    }
                }
            }

        stage('Push image') {
                steps {
                    git url: 'https://github.com/funktrust/mainstay.git'
                    container('docker') {
                        sh 'docker push funktrust/mainstay:${BUILD_ID}'
                    }
                }
            }
    }
}